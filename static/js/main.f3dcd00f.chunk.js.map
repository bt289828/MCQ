{"version":3,"sources":["components/ProgressBar/Progress.jsx","components/Button/Button.jsx","helper/index.js","components/Question/Question.jsx","components/ScoreBar/ScoreBar.jsx","components/Rating/Rating.jsx","constants/index.js","components/Header/Header.jsx","json/request.js","App.js","index.js"],"names":["ProgressBar","_ref","questionNumber","questionCount","width","react_default","a","createElement","className","style","concat","Button","props","_classnames","value","answer","isAnswerButton","isNextButton","onClick","_props$disabled","disabled","classnames","Object","defineProperty","decodeURI","encodedURI","decodeURIComponent","randomizeArray","arr","sort","Math","random","calulatePercent","smallValue","largeValue","ceil","Question","type","question","incorrectAnswers","nextQuestion","handleScore","currentNumber","_useState","useState","_useState2","slicedToArray","correctAnswer","setCorrectAnswer","_useState3","_useState4","mixedAnswers","setMixedAnswers","_useState5","_useState6","selectedAnswer","setSelectedAnswer","handleNext","useEffect","randomizedAnswers","toConsumableArray","map","idx","components_Button_Button","key","handleAnswer","isCorrectAnswer","buttonText","displayResult","ScoreBar","score","correctAnswersScore","setCorrectAnswersScore","completedAllScore","setCompletedAllScore","maximumScore","setMaximumScore","_useState7","_useState8","expectedScore","setExpectedScore","undefined","correctAnswers","completedAnswers","maxAnswers","Rating","isValid","index_es","icon","faStar","DIFFICULTY_LEVELS","Header","difficulty","category","Fragment","_","difficultyIndex","indexOf","components_Rating_Rating","createRating","getQuestion","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","console","log","JSON","stringify","stop","apply","this","arguments","App","questions","setQuestions","currentQuestion","setCurrentQuestion","setCurrentNumber","quizScore","setQuizScore","_useState9","_useState10","completedQuiz","setCompletedQuiz","length","correct_answer","incorrect_answers","loadQuestion","App_regeneratorRuntime","loadedQuestion","shuffledQuestions","Progress","components_Header_Header","components_Question_Question","nextNumber","components_ScoreBar_ScoreBar","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f3dcd00f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './progress.css'\n\n/**\n * ProgressBar component \n */\nconst ProgressBar = ({ questionNumber, questionCount }) => {\n  const width = questionNumber && questionCount\n    ? (questionNumber / questionCount) * 100\n    : 0;\n\n  return (\n    <div className={['progress-container']}>\n      <div className={['progress']} style={{ width: `${width}%` }} />\n    </div>\n  );\n};\n\nexport default ProgressBar;","import React from 'react'\nimport classnames from 'classnames'\nimport './button.css'\n\nconst Button = props => {\n  const { value, answer, isAnswerButton, isNextButton, onClick, disabled=false } = props;\n\n  const className = classnames(['base-button'], {\n    [['answer-button']]: isAnswerButton,\n    [['is-answer']]: (value === answer),\n    [['next-button']]: isNextButton\n  })\n\n  return (\n    <button className={className} onClick={onClick} disabled={disabled}>\n      {value}\n    </button>\n  )\n}\n\nexport default Button;","export const decodeURI = (encodedURI) => {\n    return encodedURI ? decodeURIComponent(encodedURI) : encodedURI\n  }\n  \n  export const randomizeArray = (arr) => {\n    return arr.sort(() => Math.random() - 0.5);\n  }\n  \n  export const calulatePercent = (smallValue, largeValue) => {\n    return Math.ceil(smallValue / largeValue * 100);\n  }","import React, { useState, useEffect } from 'react'\nimport classnames from 'classnames'\nimport './question.css'\nimport Button from '../Button/Button';\nimport { decodeURI, randomizeArray } from '../../helper';\n\nconst Question = (props) => {\n  const {\n    type,\n    question,\n    incorrectAnswers,\n    nextQuestion,\n    handleScore,\n    questionCount,\n    currentNumber\n  } = props;\n\n  const [correctAnswer, setCorrectAnswer] = useState()\n  const [mixedAnswers, setMixedAnswers] = useState([])\n  const [selectedAnswer, setSelectedAnswer] = useState()\n  \n  const handleAnswer = (answer) => {\n    // If an answer is already selected, don't update the selected answer\n    if (selectedAnswer) return\n    setSelectedAnswer(answer);\n  }\n\n  const handleNext = () => {\n    if (correctAnswer === selectedAnswer) {\n      handleScore()\n    }\n    nextQuestion()\n    setSelectedAnswer(null)\n  }\n\n  const displayResult = () => {\n    const isCorrectAnswer = correctAnswer === selectedAnswer;\n    const buttonText = currentNumber === questionCount ? 'Check Score' : 'Next Question'\n\n    return (selectedAnswer &&\n      <div className={['result-container']}>\n        <h3 className={classnames(['message' ], { [['correct-answer'] ]: isCorrectAnswer }) }>\n          {isCorrectAnswer ? 'Correct' : 'Sorry. Please try again.'}\n        </h3>\n        <Button isNextButton onClick={handleNext} value={buttonText} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    if (!props.correctAnswer || !incorrectAnswers) return\n\n    setCorrectAnswer(props.correctAnswer)\n\n    const randomizedAnswers = randomizeArray([...incorrectAnswers, correctAnswer]);\n\n    setMixedAnswers(randomizedAnswers);\n}, [correctAnswer, incorrectAnswers, props.correctAnswer])  \n  \n  return (\n    <div className={['container']}>\n      <div className={['content']}>\n        {decodeURI(question)}\n      </div>\n      <div className={['answers']}>\n        {mixedAnswers.map((answer, idx) => {\n          const value = type === 'boolean'\n            ? (answer === 'True' ? 'Yes' : 'No')\n            : decodeURI(answer);\n          \n          return (\n            <Button\n              isAnswerButton\n              key={idx}\n              value={value}\n              answer={selectedAnswer}\n              onClick={() => handleAnswer(answer)}\n              disabled={selectedAnswer}\n              correctAnswer={props.correctAnswer}\n            />\n          )\n        })}\n      </div>\n      {displayResult()}\n    </div>\n  );\n}\n\nexport default Question;","import React, { useState, useEffect } from 'react';\nimport './scorebar.css'\nimport { calulatePercent } from '../../helper';\n\nconst ScoreBar = ({\n  score,\n  questionCount,\n  questionNumber\n}) => {\n  const [correctAnswersScore, setCorrectAnswersScore] = useState(0)\n  const [completedAllScore, setCompletedAllScore] = useState(0)\n  const [maximumScore, setMaximumScore] = useState(0)\n  const [expectedScore, setExpectedScore] = useState(0)\n\n  useEffect(() => {\n    if (score !== undefined ) {\n      const correctAnswers = calulatePercent(score, questionCount)\n      const completedAnswers = calulatePercent(score, questionNumber)\n      const maxAnswers = calulatePercent((questionCount - questionNumber + score), questionCount)\n      \n      setCorrectAnswersScore(correctAnswers)\n      setCompletedAllScore(completedAnswers - correctAnswers)\n      setMaximumScore(maxAnswers)\n      setExpectedScore(maxAnswers - correctAnswers)\n    }\n  }, [score, questionCount, questionNumber])\n  \n  return (\n    <div className={['score-bar-container']}>\n      <div className={['stats-container']}>\n        <div className={['stats']}>Score: {correctAnswersScore}%</div>\n        <div className={['stats']}>Max: {maximumScore}%</div>\n      </div>\n      <div className={['score-bar']}>\n        <div className={['correct-score-bar']} style={{ width: `${correctAnswersScore}%` }}/>\n        <div className={['completed-score-bar']} style={{ width: `${completedAllScore}%` }} />\n        <div className={['expected-score-bar']} style={{ width: `${expectedScore}%` }} />\n      </div>\n    </div>\n  )\n}\n\nexport default ScoreBar;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\nimport classnames from 'classnames';\nimport './rating.css'\n\n\nconst Rating = ({ isValid }) => {\n  return (\n    <span className={classnames(['rating'], { [['is-valid']]: isValid })}>\n      <FontAwesomeIcon icon={faStar} />\n    </span>\n  )\n}\n\nexport default Rating;","const EASY = 'easy'\nconst MEDIUM = 'medium'\nconst HARD = 'hard'\n\nexport const DIFFICULTY_LEVELS = [ EASY, MEDIUM, HARD ]","import React from 'react';\nimport Rating from '../Rating/Rating';\nimport { decodeURI } from '../../helper';\n\nimport './header.css'\nimport { DIFFICULTY_LEVELS } from '../../constants';\n\nconst createRating = (difficulty) => {\n  return (\n    <>\n      {DIFFICULTY_LEVELS.map((_, idx) => {\n        const difficultyIndex = DIFFICULTY_LEVELS.indexOf(difficulty);\n\n        return (\n          <Rating isValid={idx <= difficultyIndex} key={idx} />\n        )\n      })}\n    </>\n  )\n};\n\nconst Header = ({\n  questionCount,\n  questionNumber,\n  difficulty,\n  category,\n}) => {\n  return (\n    <div className={['header-container']}>\n      <h1 className={['header-title']}>\n        Question {questionNumber + 1} of {questionCount}\n      </h1>\n      <h2 className={['header-subtitle']}>\n        {decodeURI(category)}\n      </h2>\n      {createRating(difficulty)}\n    </div>\n  )\n}\n\nexport default Header;","export const getQuestion = async () => {\n    try {\n      const res = await fetch('./questions.json');\n      // console.log(res);\n      return await res.json();\n    }\n    catch (err) {\n      return console.log('Failed to parse: ', JSON.stringify(err));\n    }\n  }","import React, { useState, useEffect } from 'react'\nimport ProgressBar from './components/ProgressBar/Progress'\nimport Question from './components/Question/Question'\nimport ScoreBar from './components/ScoreBar/ScoreBar'\nimport Header from './components/Header/Header'\nimport Button from './components/Button/Button'\nimport { getQuestion } from './json/request';\nimport { randomizeArray, calulatePercent } from './helper'\nimport './App.css'\n\nfunction App () {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion ] = useState({})\n  const [currentNumber, setCurrentNumber ] = useState(0)\n  const [quizScore, setQuizScore] = useState(0)\n  const [completedQuiz, setCompletedQuiz] = useState(false)\n  \n  const questionCount = questions.length\n  const {\n    category,\n    difficulty,\n    type,\n    correct_answer,\n    incorrect_answers,\n    question\n  } = currentQuestion\n\n  const initializeState = () => {\n    setQuestions([])\n    setCurrentQuestion({})\n    setCurrentNumber(0)\n    setQuizScore(0)\n    setCompletedQuiz(false)\n  }\n  \n  const loadQuestion = async() => {\n    const loadedQuestion = await getQuestion()\n    const shuffledQuestions = randomizeArray(loadedQuestion)\n    setQuestions(shuffledQuestions)\n  }\n\n  const handleNextQuestion = () => {\n    const nextNumber = currentNumber + 1\n    return nextNumber < questionCount\n      ? setCurrentNumber(nextNumber)\n      : setCompletedQuiz(true)\n  }\n\n  const handleScore = () => {\n    setQuizScore(quizScore + 1)\n  }\n\n  const handleStartQuiz = () => {\n    initializeState()\n    loadQuestion()\n  }\n\n  useEffect(() => {\n    loadQuestion()\n  }, [])\n\n  useEffect(() => {\n    if (questions.length) {\n      const question = questions[currentNumber]\n      setCurrentQuestion(question)\n    }\n  }, [questions, currentNumber])\n  \n  return (\n    <div className={['app-container']}>\n      <ProgressBar questionNumber={currentNumber + 1} questionCount={questionCount} />\n      {completedQuiz ? (\n        <div className={['quiz-score']}>\n          <h1>Your score: {calulatePercent(quizScore, questionCount)}%</h1>\n          <Button onClick={handleStartQuiz} value=\"Start Again\" />\n        </div>\n      ): (\n        <div className={['quiz-content']}>\n          <Header\n            questionNumber={currentNumber}\n            questionCount={questionCount}\n            category={category}\n            difficulty={difficulty}\n          />\n          <Question\n            type={type}\n            question={question}\n            correctAnswer={correct_answer}\n            incorrectAnswers={incorrect_answers}\n            nextQuestion={handleNextQuestion}\n            handleScore={handleScore}\n            questionCount={questionCount}\n            currentNumber={currentNumber + 1}\n          />\n          <ScoreBar\n            score={quizScore}\n            questionCount={questionCount}\n            questionNumber={currentNumber}\n          />\n        </div>          \n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}